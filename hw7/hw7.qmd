---
title: Homework 7 - Creating a resume database
author: Charles Hesse 
date: 12-6-2023
format:
    html:
        theme: cosmo
        toc: true
        embed-resources: true
        code-copy: true
---

This is my (very late) submission for HW7. I've created a database using a DDL. This work was done in an accompanying SQL file.


GITHUB URL:  <https://github.com/cmsc-vcu/cmsc508-fa2023-hw7-CharlesJH5>

```{python}
#| eval: true
#| echo: false
import os
import sys
import pandas as pd
from tabulate import tabulate
from dotenv import load_dotenv
from sqlalchemy import create_engine, text
from sqlalchemy.exc import OperationalError, ProgrammingError
from IPython.display import display, Markdown
```
```{python}
#| eval: true
#| echo: false

# modify config_map to reflect credentials needed by this program
config_map = {
    'user':'CMSC508_USER',
    'password':'CMSC508_PASSWORD',
    'host':'CMSC508_HOST',
    'database':'HW7_DB_NAME'
}
# load and store credentials
load_dotenv()
config = {}
for key in config_map.keys():
    config[key] = os.getenv(config_map[key])
flag = False
for param in config.keys():
    if config[param] is None:
        flag = True
        print(f"Missing {config_map[param]} in .env file")
#if flag:
#    sys.exit(1)
```
```{python}
#| eval: true
#| echo: false

# build a sqlalchemy engine string
engine_uri = f"mysql+pymysql://{config['user']}:{config['password']}@{config['host']}/{config['database']}"

# create a database connection.  THIS IS THE ACTUAL CONNECTION!
try:
    cnx = create_engine(engine_uri)
except ArgumentError as e:
    print(f"create_engine: Argument Error: {e}")
    #sys.exit(1)
except NoSuchModuleError as e:
    print(f"create_engine: No Such Module Error: {e}")
    #sys.exit(1)
except Exception as e:
    print(f"create_engine: An error occurred: {e}")
    #sys.exit(1)
```
```{python}
#| echo: false
#| eval: true

# Do a quick test of the connection and trap the errors better!
try:
    databases = pd.read_sql("show databases",cnx)
except ImportError as e:
    print(f"Error: {e}")
except OperationalError as e:
    print(f"Database/SQL Error:\n{str(e)}\n")
except ProgrammingError as e:
    print(f"Programming Error:\n{str(e)}\n")
except Exception as e:
    print(f"An error occurred:\n{str(e)}\n")

```

## Overview and description

This database is comprised of employees in a company, and provides a way to search their skills and the time they've spent in the company.
People can have multiple skills, and multiple roles. These exist in seperate tables.

## Crows-foot diagram

This diagram shows the relationship between the tables. People can be described by their skills and roles. Peopleskills and peopleroles are an intermediary entity that uses a base table to roles and skills that list what types of roles and skills exist.

```{mermaid}
erDiagram
    roles }|--o{ peopleroles : assigns
    people }|--o{ peopleskills : identify
    people }o--|{ peopleroles : "belong to"
    skills }o--|{ peopleskills : attributes
    
    people {
        int id PK
        varchar first_name
        varchar last_name
        varchar email
        varchar linkedin_url
        varchar headshot_url
        varchar discord_handle
        varchar brief_bio
    }
    roles {
        int id PK
        varchar name
        int sort_priority
    }
    skills {
        int id PK
        varchar name
        varchar description
        varchar tag
        varchar URL
        varchar time_commitment
    }
    peopleroles {
        int id PK
        int people_id FK
        int role_id FK
        varchar date_assigned
    }
    peopleskills {
        int id
        int skills_id FK
        int people_id FK
        varchar date_acquired
    }
```

## Examples of data in the database

For the people, skills, and roles tables, provide a description of each table and it's contents. Then provide a listing of the entire table.

### People table

The *people* table contains elements that describe ... 

Below is a list of data in the *people* table.

```{python}
#| echo: false
#| eval: true
sql = f"""
select * from people;
"""
## Add code to list roles table here
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### Skills table

The *skills* table contains elements that describe ... 

Below is a list of data in the *skills* table.

```{python}
#| echo: false
#| eval: true
sql = f"""
select * from skills;
"""
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
## Add code to list roles table here
```

### Roles table

The *roles* table contains elements that describe ... 

Below is a list of data in the *roles* table.

```{python}
#| echo: false
#| eval: true
sql = f"""
select * from roles;
"""
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
## Add code to list roles table here
```


## Sample queries

Let's explore the database!

# List skill names, tags, and descriptions ordered by name

(here a sample query)

```{python}
sql = f"""
select name, tag, description from skills
order by name ASC
"""
```


(and here is a sample result from the query)

```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```


### List people names and email addresses ordered by last_name

```{python}
#| echo: false
#| eval: true
sql = f"""
select last_name, email from people
order by last_name ASC
"""
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
## Add code to list roles table here
```

### List skill names of Person 1

```{python}
#| echo: false
#| eval: true
sql = f"""
select skills.name 
from skills
inner join peopleskills on peopleskills.skills_id=skills.id
where peopleskills.people_id=1
"""
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
## Add code to list roles table here
```


### List people names with Skill 6

```{python}
#| echo: false
#| eval: true
sql = f"""
select people.first_name, people.last_name 
from people
inner join peopleskills on peopleskills.people_id=people.id
where peopleskills.skills_id=6
"""
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
## Add code to list roles table here
```


### List people with a DEVELOPER role

```{python}
#| echo: false
#| eval: true
sql = f"""
select * from people
inner join peopleroles on peopleroles.people_id=people.id
where peopleroles.role_id=2
"""
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
## Add code to list roles table here
```


### List names and email addresses of people without skills

```{python}
#| echo: false
#| eval: true
sql = f"""
select people.first_name, people.last_name, people.email 
from people
left join peopleskills on peopleskills.people_id=people.id
where peopleskills.id is null
"""
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
## Add code to list roles table here
```


### List names and tags of unused skills

```{python}
#| echo: false
#| eval: true
sql = f"""
select skills.name, skills.tag 
from skills
left join peopleskills on peopleskills.skills_id=skills.id
where peopleskills.skills_id is null
"""
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
## Add code to list roles table here
```

### List people names and skill names with the BOSS role

```{python}
#| echo: false
#| eval: true
sql = f"""
select people.first_name, people.last_name, skills.name 
from people
join peopleroles on peopleroles.people_id=people.id
join peopleskills on peopleskills.people_id=people.id
join skills on peopleskills.skills_id=skills.id
where peopleroles.role_id=5
"""
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
## Add code to list roles table here
```

### List ids and names of unused roles

```{python}
#| echo: false
#| eval: true
sql = f"""
select roles.id, roles.name
from roles
right join peopleroles on peopleroles.role_id=roles.id
where peopleroles.people_id is null
"""
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
## Add code to list roles table here
```

## Reflection

This was actually a really fun assignment. Maybe the time crunch made it more enjoyable. But I had a really fun time working out the logic for those SQL statements. It was like a cool little puzzle. Getting things actually working went smoother than anticipated. I was intimidated at first but everything was pretty straight forward. It's great that solutions to technicical issues were easy enough to find online.

